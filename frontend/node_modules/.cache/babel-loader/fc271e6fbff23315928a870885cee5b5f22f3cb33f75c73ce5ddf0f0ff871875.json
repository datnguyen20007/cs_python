{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dat\\\\Desktop\\\\Projects\\\\cs2025\\\\reactfirst\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LandPricePredictor() {\n  _s();\n  const [landArea, setLandArea] = useState(\"\");\n  const [predictedPrice, setPredictedPrice] = useState(null);\n  const [error, setError] = useState(null);\n  const handlePredict = async () => {\n    setError(null);\n    setPredictedPrice(null);\n    const landAreaFloat = parseFloat(landArea);\n    if (isNaN(landAreaFloat) || landAreaFloat <= 0) {\n      setError(\"Please enter a valid positive number\");\n      return;\n    }\n    try {\n      const response = await fetch(\"http://192.168.1.1:5000/predict\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          land_area: landAreaFloat\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setPredictedPrice(data.predicted_price);\n      } else {\n        setError(data.error || \"An error occurred\");\n      }\n    } catch (err) {\n      setError(\"Failed to connect to server\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: \"400px\",\n      margin: \"2rem auto\",\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Land Price Predictor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      step: \"any\",\n      placeholder: \"Enter land area\",\n      value: landArea,\n      onChange: e => setLandArea(e.target.value),\n      style: {\n        padding: \"0.5rem\",\n        width: \"100%\",\n        marginBottom: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePredict,\n      style: {\n        padding: \"0.5rem 1rem\"\n      },\n      children: \"Predict Price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), predictedPrice !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"green\",\n        marginTop: \"1rem\"\n      },\n      children: [\"Predicted Price: $\", predictedPrice.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        marginTop: \"1rem\"\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(LandPricePredictor, \"q6r9x1hKDVT8ke0nS5JMHh/jlk8=\");\n_c = LandPricePredictor;\nvar _c;\n$RefreshReg$(_c, \"LandPricePredictor\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","LandPricePredictor","_s","landArea","setLandArea","predictedPrice","setPredictedPrice","error","setError","handlePredict","landAreaFloat","parseFloat","isNaN","response","fetch","method","headers","body","JSON","stringify","land_area","data","json","ok","predicted_price","err","style","maxWidth","margin","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","type","step","placeholder","value","onChange","e","target","padding","width","marginBottom","onClick","color","marginTop","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/dat/Desktop/Projects/cs2025/reactfirst/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nexport default function LandPricePredictor() {\n  const [landArea, setLandArea] = useState(\"\");\n  const [predictedPrice, setPredictedPrice] = useState(null);\n  const [error, setError] = useState(null);\n\n  const handlePredict = async () => {\n    setError(null);\n    setPredictedPrice(null);\n\n    const landAreaFloat = parseFloat(landArea);\n    if (isNaN(landAreaFloat) || landAreaFloat <= 0) {\n      setError(\"Please enter a valid positive number\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"http://192.168.1.1:5000/predict\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ land_area: landAreaFloat }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setPredictedPrice(data.predicted_price);\n      } else {\n        setError(data.error || \"An error occurred\");\n      }\n    } catch (err) {\n      setError(\"Failed to connect to server\");\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: \"400px\", margin: \"2rem auto\", textAlign: \"center\" }}>\n      <h2>Land Price Predictor</h2>\n      <input\n        type=\"number\"\n        step=\"any\"\n        placeholder=\"Enter land area\"\n        value={landArea}\n        onChange={(e) => setLandArea(e.target.value)}\n        style={{ padding: \"0.5rem\", width: \"100%\", marginBottom: \"1rem\" }}\n      />\n      <button onClick={handlePredict} style={{ padding: \"0.5rem 1rem\" }}>\n        Predict Price\n      </button>\n\n      {predictedPrice !== null && (\n        <p style={{ color: \"green\", marginTop: \"1rem\" }}>\n          Predicted Price: ${predictedPrice.toFixed(2)}\n        </p>\n      )}\n\n      {error && (\n        <p style={{ color: \"red\", marginTop: \"1rem\" }}>\n          Error: {error}\n        </p>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}