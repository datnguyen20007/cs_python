{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dat\\\\Desktop\\\\Projects\\\\cs2025\\\\reactfirst\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LandPricePredictor() {\n  _s();\n  const [landArea, setLandArea] = useState(\"\");\n  const [predictedPrice, setPredictedPrice] = useState(null);\n  const [error, setError] = useState(null);\n  const handlePredict = async () => {\n    setError(null);\n    setPredictedPrice(null);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/predict\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          land_area: parseFloat(landArea)\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setPredictedPrice(data.predicted_price);\n      } else {\n        setError(data.error || \"An error occurred\");\n      }\n    } catch (err) {\n      setError(\"Failed to connect to server\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center mt-10\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"p-6 w-96\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold mb-4\",\n          children: \"Land Price Predictor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          placeholder: \"Enter land area\",\n          value: landArea,\n          onChange: e => setLandArea(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"mt-4 w-full\",\n          onClick: handlePredict,\n          children: \"Predict Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), predictedPrice !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-4 text-green-600\",\n          children: [\"Predicted Price: $\", predictedPrice]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-4 text-red-600\",\n          children: [\"Error: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(LandPricePredictor, \"q6r9x1hKDVT8ke0nS5JMHh/jlk8=\");\n_c = LandPricePredictor;\nvar _c;\n$RefreshReg$(_c, \"LandPricePredictor\");","map":{"version":3,"names":["useState","Card","CardContent","Button","Input","jsxDEV","_jsxDEV","LandPricePredictor","_s","landArea","setLandArea","predictedPrice","setPredictedPrice","error","setError","handlePredict","response","fetch","method","headers","body","JSON","stringify","land_area","parseFloat","data","json","ok","predicted_price","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/dat/Desktop/Projects/cs2025/reactfirst/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\nexport default function LandPricePredictor() {\n  const [landArea, setLandArea] = useState(\"\");\n  const [predictedPrice, setPredictedPrice] = useState(null);\n  const [error, setError] = useState(null);\n\n  const handlePredict = async () => {\n    setError(null);\n    setPredictedPrice(null);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/predict\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ land_area: parseFloat(landArea) }),\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setPredictedPrice(data.predicted_price);\n      } else {\n        setError(data.error || \"An error occurred\");\n      }\n    } catch (err) {\n      setError(\"Failed to connect to server\");\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center mt-10\">\n      <Card className=\"p-6 w-96\">\n        <CardContent>\n          <h2 className=\"text-xl font-bold mb-4\">Land Price Predictor</h2>\n          <Input\n            type=\"number\"\n            placeholder=\"Enter land area\"\n            value={landArea}\n            onChange={(e) => setLandArea(e.target.value)}\n          />\n          <Button className=\"mt-4 w-full\" onClick={handlePredict}>\n            Predict Price\n          </Button>\n          {predictedPrice !== null && (\n            <p className=\"mt-4 text-green-600\">Predicted Price: ${predictedPrice}</p>\n          )}\n          {error && <p className=\"mt-4 text-red-600\">Error: {error}</p>}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}